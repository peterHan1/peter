! function(t, s, i, e) {
	var l = function(s, i) {
		this.ele = s, this.defaults = {
			width: 300,
			height: 34,
			sliderBg: "#e8e8e8",
			color: "#666",
			fontSize: 12,
			bgColor: "#7ac23c",
			textMsg: "请按住滑块，拖动到最右边",
			successMsg: "验证成功",
			successColor: "#fff",
			time: 160,
			callback: function(t) {}
		}, this.opts = t.extend({}, this.defaults, i), this.init();
	};
	l.prototype = {
		init: function() {
			this.result = !1, this.sliderBtn_left = 0, this.maxLeft = this.opts.width - this.opts.height, this.render(), this.eventBind();
		},
		render: function() {
			var t = '<div class="ui-slider-wrap"><div class="ui-slider-text ui-slider-no-select ui-sliderlock">' + this.opts.textMsg + '</div><div class="ui-slider-btn init ui-slider-no-select"></div><div class="ui-slider-bg"></div></div>';
			this.ele.html(t), this.initStatus();
		},
		initStatus: function() {
			var t = this,
				s = this.ele;
			this.slider = s.find(".ui-slider-wrap"), this.sliderBtn = s.find(".ui-slider-btn"), this.bgColor = s.find(".ui-slider-bg"), this.sliderText = s.find(".ui-slider-text"), this.slider.css({
				width: t.opts.width,
				height: t.opts.height,
				backgroundColor: t.opts.sliderBg
			}), this.sliderBtn.css({
				width: t.opts.height,
				height: t.opts.height,
				lineHeight: t.opts.height + "px"
			}), this.bgColor.css({
				height: t.opts.height,
				backgroundColor: t.opts.bgColor
			}), this.sliderText.css({
				lineHeight: t.opts.height + "px",
				fontSize: t.opts.fontSize,
				color: t.opts.color
			});
		},
		restore: function() {
			var t = this,
				s = t.opts.time;
			this.result = !1, this.initStatus(), this.sliderBtn.removeClass("success").animate({
				left: 0
			}, s), this.bgColor.animate({
				width: 0
			}, s, function() {
				t.sliderText.text(t.opts.textMsg).addClass("ui-sliderlock");
			});
		},
		eventBind: function() {
			var t = this;
			this.ele.on("mousedown", ".ui-slider-btn", function(s) {
				t.result || t.sliderMousedown(s);
			});
		},
		sliderMousedown: function(t) {
			var s = this,
				i = t.clientX,
				e = i - this.sliderBtn.offset().left;
			s.sliderMousemove(i, e), s.sliderMouseup();
		},
		sliderMousemove: function(s, e) {
			var l = this;
			t(i).on("mousemove.slider", function(t) {
				l.sliderBtn_left = t.clientX - s - e, l.sliderBtn_left < 0 || (l.sliderBtn_left > l.maxLeft && (l.sliderBtn_left = l.maxLeft), l.sliderBtn.css("left", l.sliderBtn_left), l.bgColor.width(l.sliderBtn_left));
			});
		},
		sliderMouseup: function() {
			var s = this;
			t(i).on("mouseup.slider", function() {
				s.sliderBtn_left != s.maxLeft ? s.sliderBtn_left = 0 : (s.ele.find(".ui-slider-text").text(s.opts.successMsg).css({
					color: s.opts.successColor
				}).removeClass("ui-sliderlock"), s.ele.find(".ui-slider-btn").addClass("success"), s.result = !0), s.sliderBtn.animate({
					left: s.sliderBtn_left
				}, s.opts.time), s.bgColor.animate({
					width: s.sliderBtn_left
				}, s.opts.time), t(this).off("mousemove.slider mouseup.slider"), s.opts.callback && "function" == typeof s.opts.callback && s.opts.callback(s.result);
			});
		}
	}, t.fn.slider = function(s) {
		return this.each(function() {
			var i = t(this),
				e = i.data("slider");
			e || (e = new l(i, s), i.data("slider", e)), "string" == typeof s && e[s]();
		});
	};
}(jQuery, window, document);